syntax = "proto3";
option java_package = "de.umr.raft.raftlogreplicationdemo.replication.api.proto";
// option java_outer_classname = "MetadataProtos";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
package raftlogreplicationdemo.replication.api.proto.operations.eventstore;
import "operations/OperationResultStatus.proto";

enum EventStoreOperationType {
    NULL = 0; // null/noop operation that does nothing
    PUSH_EVENTS = 1;
    QUERY = 2;
    AGGREGATE = 3;
    GET_KEY_RANGE = 4;
    CLEAR = 5; // clears the whole stream
}

message EventStoreOperationProto {
    EventStoreOperationType operation_type = 1;
    repeated EventProto events = 2; // for push operations
    string query = 3; // TODO may there be a binary representation of queries? Would that have any positive impact on performance?
    AggregateRequestProto aggregate_request = 4;
    PushOptionsProto push_options = 5;
}

enum AggregationValueType {
    UNKNOWN_VALUE_TYPE = 0;
    LONG = 1;
    FLOAT = 2;
    // BBOX = 3; // currently ignored
    // there may be more value types, but currently there are only numerical ones
}

message AggregationValueProto {
    bool is_null = 1;
    AggregationValueType value_type = 2;
    float float_value = 3;
    int64 long_value = 4;
    // TODO bounding_box_value
}

message EventStoreOperationResultProto {
    EventStoreOperationType operation_type = 1;
    OperationResultStatus status = 2;
    bool is_null_result = 3;
    repeated EventProto query_result = 4;
    RangeProto key_range_result = 5;
    map<string, AggregationValueProto> aggregation_result = 6;
}

enum EventSerializationType {
    UNKNOWN_SERIALIZATION_TYPE = 0;
    NATIVE = 1;
    PROTOBUF = 2;
}

message EventProto {
    EventSerializationType serialization_type = 1;
    uint64 t1 = 2; // event start
    uint64 t2 = 3; // event end
    repeated bytes payload = 4; // binary representation, need certain serialization strategies on client side (maybe another protobufs)
    bytes native_serialized_event = 5; // in case the event is serialized using native chronicle serializer in java
}

message RangeProto {
    uint64 lower = 1;
    uint64 upper = 2;
    bool is_lower_inclusive = 3;
    bool is_upper_inclusive = 4;
}

enum AggregateScopeProto {
    UNKNOWN_SCOPE = 0;
    ATTRIBUTE = 1;
    GLOBAL = 2;
}

enum AggregateTypeProto {
    UNKNOWN_AGGREGATE = 0;
    COUNT = 1;
    SUM = 2;
    MIN = 3;
    MAX = 4;
    BBOX = 5;
}

// TODO is this sufficient?
message EventAggregateProto {
    AggregateScopeProto aggregate_scope = 1;
    AggregateTypeProto aggregate_id = 2;
    string attribute = 3;
}

message AggregateRequestProto {
    RangeProto range = 1;
    repeated EventAggregateProto event_aggregates = 2;
}

message PushOptionsProto {
    bool is_ordered = 1;
}
